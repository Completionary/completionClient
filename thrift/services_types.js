//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Suggestion = function(args) {
  this.suggestion = null;
  this.payload = null;
  if (args) {
    if (args.suggestion !== undefined) {
      this.suggestion = args.suggestion;
    }
    if (args.payload !== undefined) {
      this.payload = args.payload;
    }
  }
};
Suggestion.prototype = {};
Suggestion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.suggestion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.payload = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Suggestion.prototype.write = function(output) {
  output.writeStructBegin('Suggestion');
  if (this.suggestion !== null && this.suggestion !== undefined) {
    output.writeFieldBegin('suggestion', Thrift.Type.STRING, 1);
    output.writeString(this.suggestion);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRING, 2);
    output.writeString(this.payload);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SuggestionField = function(args) {
  this.ID = null;
  this.output = null;
  this.input = null;
  this.payload = null;
  this.weight = null;
  if (args) {
    if (args.ID !== undefined) {
      this.ID = args.ID;
    }
    if (args.output !== undefined) {
      this.output = args.output;
    }
    if (args.input !== undefined) {
      this.input = args.input;
    }
    if (args.payload !== undefined) {
      this.payload = args.payload;
    }
    if (args.weight !== undefined) {
      this.weight = args.weight;
    }
  }
};
SuggestionField.prototype = {};
SuggestionField.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.output = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.input = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.input.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.payload = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.weight = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestionField.prototype.write = function(output) {
  output.writeStructBegin('SuggestionField');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.output !== null && this.output !== undefined) {
    output.writeFieldBegin('output', Thrift.Type.STRING, 2);
    output.writeString(this.output);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.input.length);
    for (var iter7 in this.input)
    {
      if (this.input.hasOwnProperty(iter7))
      {
        iter7 = this.input[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRING, 4);
    output.writeString(this.payload);
    output.writeFieldEnd();
  }
  if (this.weight !== null && this.weight !== undefined) {
    output.writeFieldBegin('weight', Thrift.Type.I32, 5);
    output.writeI32(this.weight);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

