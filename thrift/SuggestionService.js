//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

SuggestionService_findSuggestionsFor_args = function(args) {
  this.index = null;
  this.query = null;
  this.k = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.k !== undefined) {
      this.k = args.k;
    }
  }
};
SuggestionService_findSuggestionsFor_args.prototype = {};
SuggestionService_findSuggestionsFor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.index = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.k = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestionService_findSuggestionsFor_args.prototype.write = function(output) {
  output.writeStructBegin('SuggestionService_findSuggestionsFor_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.STRING, 1);
    output.writeString(this.index);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.k !== null && this.k !== undefined) {
    output.writeFieldBegin('k', Thrift.Type.I16, 3);
    output.writeI16(this.k);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SuggestionService_findSuggestionsFor_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SuggestionService_findSuggestionsFor_result.prototype = {};
SuggestionService_findSuggestionsFor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Suggestion();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestionService_findSuggestionsFor_result.prototype.write = function(output) {
  output.writeStructBegin('SuggestionService_findSuggestionsFor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SuggestionServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
SuggestionServiceClient.prototype = {};
SuggestionServiceClient.prototype.findSuggestionsFor = function(index, query, k) {
  this.send_findSuggestionsFor(index, query, k);
  return this.recv_findSuggestionsFor();
};

SuggestionServiceClient.prototype.send_findSuggestionsFor = function(index, query, k) {
  this.output.writeMessageBegin('findSuggestionsFor', Thrift.MessageType.CALL, this.seqid);
  var args = new SuggestionService_findSuggestionsFor_args();
  args.index = index;
  args.query = query;
  args.k = k;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

SuggestionServiceClient.prototype.recv_findSuggestionsFor = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SuggestionService_findSuggestionsFor_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'findSuggestionsFor failed: unknown result';
};
